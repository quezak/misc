# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# history
HISTCONTROL=ignoreboth
HISTSIZE=500000
HISTFILESIZE=500000
shopt -s histappend
shopt -s checkwinsize

# disable XON signal (old TTY scroll-lock via Ctrl-S)
stty -ixon

# prompt
if [ $EUID -eq 0 ]; then
    if [ -n "$SSH_TTY" ]; then
        ucolor='30;47m';
    else
    ucolor='01;37m';
    fi
    if [ "$(stat -c %d:%i /)" != "$(stat -c %d:%i /proc/1/root/.)" ]; then
        IS_CHROOT=1
        export MAKEOPTS="-j8"
        export EMERGE_DEFAULT_OPTS="-j5"
        echo "chroot env params set"
    fi
else
    if [ -n "$SSH_TTY" ]; then
        ucolor='01;33m'
    else
        ucolor='00;33m'
    fi
fi
PS1="\[\033[35m\]\$(printf '% 4d' \$?)\[\033[0m\]\[\033[01;32m\][\[\033[${ucolor}\]\u\[\033[01;31m\]@\[\033[00;32m\]\h\[\033[01;32m\]]\[\033[0;34m\]\w\[\033[01;31m\]>: \[\033[00m\]"
PS2="\[\033[1;31m\]>:\[\033[0m\] "
if [ -n "$IS_CHROOT" ]; then
    PS1="\[\033[30;47m\][chrt]\[\033[0m\] $PS1"
fi
unset ucolor

# window title
case ${TERM} in
    xterm*|rxvt*|Eterm*|aterm|kterm|gnome*|interix) PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/~}\007"';;
    screen*) PROMPT_COMMAND='echo -ne "\033_${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/~}\033\\"';;
esac

# colors
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto --group-directories-first'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
    if [ -r "$HOME/.LS_COLORS" ]; then
        eval $( dircolors -b ~/.LS_COLORS )
    fi
fi

# env
export GNOME_DISABLE_CRASH_DIALOG=1
export PATH="$PATH:$HOME/bin:$HOME/.local/bin:$HOME/.yarn/bin:$HOME/.local/share/gem/ruby/3.0.0/bin"
export EDITOR='vim'
if [ -e "$(which vimpager 2>/dev/null)" ]; then
    export PAGER=$(which vimpager)
fi
if [ -e "$(which vimmanpager 2>/dev/null)" ]; then
    export MANPAGER=$(which vimmanpager)
fi
export GCC_COLORS='error=01;41:warning=01;33:note=01:caret=01;32:locus=35:quote=36'

# mate-gnome 'compatibility'
if [ -n "$(wmctrl -m 2> /dev/null | grep Marco)" ]; then
    alias nautilus='caja'
    alias gedit='pluma'
    alias evince='atril'
    alias metacity='marco'
fi

# aliases
alias wtf='sudo tail -f /var/log/messages'
alias vtf='sudo vim /var/log/messages'
alias PGG='ping 8.8.8.8'
alias xclip='xclip -selection c'
alias igrep='grep -i'
alias _AUDIO_INTERNAL="pacmd set-card-profile 0 'output:analog-stereo+input:analog-stereo'"
alias _AUDIO_HDMI="pacmd set-card-profile 0 'output:hdmi-stereo+input:analog-stereo'"
alias steam='LD_LIBRARY_PATH=~/lib steam'
alias mount_ntfs='sudo mount -o umask=022,noatime,uid=1000,gid=1000'
alias lsemerging='find /var/tmp/portage -maxdepth 2 -mindepth 2 -type d'
alias dirsizes='find -mindepth 1 -maxdepth 1 -type d | xargs du -sh'
alias docker-purge='docker rm $(docker ps -aq)'
alias ts-node="npx ts-node -O '{ \"noUnusedLocals\": false, \"noUnusedParameters\": false, \"target\": \"es2017\" }' -r tsconfig-paths/register"
alias git-clean-local-branches="git branch -vv | grep 'origin/.*: gone]' | awk '{print \$1}' | xargs git branch -d"
alias git-cdr='cd $(git rev-parse --show-toplevel)'
alias rand_passwd="strings /dev/urandom | tr -dc '[:alnum:]' | head -c32; echo"
alias rand_hex="strings /dev/urandom | tr -dc '0-9a-z' | head -c40; echo"

# The next line updates PATH for the Google Cloud SDK.
if [ -f /home/quezak/.cache/pacaur/google-cloud-sdk/pkg/google-cloud-sdk/opt/google-cloud-sdk/path.bash.inc ]; then
  source '/home/quezak/.cache/pacaur/google-cloud-sdk/pkg/google-cloud-sdk/opt/google-cloud-sdk/path.bash.inc'
fi

# The next line enables shell command completion for gcloud.
if [ -f /home/quezak/.cache/pacaur/google-cloud-sdk/pkg/google-cloud-sdk/opt/google-cloud-sdk/completion.bash.inc ]; then
  source '/home/quezak/.cache/pacaur/google-cloud-sdk/pkg/google-cloud-sdk/opt/google-cloud-sdk/completion.bash.inc'
fi

if [ -s /usr/share/nvm/nvm.sh ]; then
    export NVM_DIR="$HOME/.nvm"
    source /usr/share/nvm/nvm.sh
    source /usr/share/nvm/bash_completion
    source /usr/share/nvm/install-nvm-exec
fi

function wttr() {
    local request="wttr.in/${1-Warsaw}"
    local request2="${request}?format=v2"
    [ "$(tput cols)" -lt 125 ] && request+='?n'
    curl "$request"
    curl "$request2"
}

